import time
import numpy as np
import gym
import os
from gym.spaces import Box
from gym.utils import seeding
import matplotlib as plt
#plt.style.use('_mlp-gallery')




position_goal_x = 600
position_goal_y = 220

class CustomEnv3(gym.Env):

    metdata = {"render.modes" : ["human", "rgb_array"], "video.frames_per_second": 60}

    def __init__(self, env_config={}):
        self.WIDTH, self.HEIGHT = 1000, 500
        low = np.zeros(3)
        high = np.array([self.WIDTH-1, self.WIDTH-1, self.WIDTH-1], dtype=np.float32)
        self.init_x = 150
        self.y = 220
        self.max_force = 1
        self.min_force = 0
        self.action_space = Box(low=self.min_force, high=self.max_force, shape=(1,), dtype=np.float32)
        self.observation_space = Box(low=low, high=high, dtype=np.float32)

        self.seed()
        self.REIBUNG = 0.3
        self.c_times = 0
        self.clicked_times = 0

        self.seed()



    def seed(self, seed=None):
        self.np_random, seed = seeding.np_random(seed)
        return [seed]


    def reset(self):
        self.x = 150
        self.state = (150, position_goal_x, self.x)
        self.counter = 0
        return np.array(self.state, dtype=np.float32)
        # return observation


    def step(self, action):

        REIBUNG = self.REIBUNG
        WIDTH = self.WIDTH
        x_init, goal, x = self.state
        vel_x = action * 20
        max_counter = 10
        rew_counter = self.counter / max_counter
        while vel_x > 0:
            x = x + vel_x
            vel_x = vel_x - REIBUNG
        if position_goal_x - 10 <= x <= position_goal_x + 10:
            reward = 100
            done = True
        else:
            if x < position_goal_x - 10:
                reward = 10 - (abs(position_goal_x - x)) / position_goal_x
                done = True
            else:
                reward = 0
                done = False
                x = 150
        if action == 0.0:
            reward = -10
            done = True
        self.state = (x_init, position_goal_x, x)
        info = {}

        return np.array(self.state,dtype=np.float32), reward, done, info

    def render(self):
        pass
